#include "AD9833.h"   
#include <Wire.h> 
#include <Adafruit_GFX.h> 
#include <Adafruit_SSD1306.h> 
#include <math.h> 
#include <LCD_I2C.h> 

#define SET_FREQUENCY_HZ D13 
#define SET_FREQUENCY_KHZ D12 
#define SET_FREQUENCY_MHZ D11 
#define ENABLE_DISABLE_OUTPUT_PIN D3 
#define FNC_PIN D2
#define CLK_PIN D6 
#define DATA_PIN D7
#define BTN_PIN D8

int counter = 1;
int clockPin;  
int clockPinState;
unsigned long waktu = 0;
unsigned long moduleFrequency;

long debounce = 220; 
bool btn_state;
bool set_frequency_hz = 1;
bool set_frequency_khz;
bool set_frequency_mhz;
int set_frequency = 0;
String waveSelect = "SIN"; 
int encoder_btn_count = 0; 

AD9833 gen(FNC_PIN);

LCD_I2C lcd(0x27); 

void setup()
{
  lcd.begin();
  lcd.backlight();
  lcd.noCursor();
  lcd.clear();
  pinMode(CLK_PIN, INPUT);
  pinMode(DATA_PIN, INPUT);
  pinMode(BTN_PIN, INPUT_PULLUP);
  Serial.begin(9600); 
  clockPinState = digitalRead(CLK_PIN);
  pinMode(SET_FREQUENCY_HZ, INPUT_PULLUP);
  pinMode(SET_FREQUENCY_KHZ, INPUT_PULLUP);
  pinMode(SET_FREQUENCY_MHZ, INPUT_PULLUP);
  pinMode(ENABLE_DISABLE_OUTPUT_PIN, INPUT_PULLUP);
/*  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) 
  { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  display.clearDisplay(); // Clear the Screen
  lcd.setTextSize(2); // Set text Size
  display.setTextColor(WHITE); // set LCD Colour
  lcd.setCursor(30, 0); // Set Cursor Position
  lcd.println("AD9833"); // Print the this Text
  lcd.setCursor(17, 20);  // Set Cursor Position
  lcd.println("Function"); // Print the this Text
  lcd.setCursor(13, 40); // Set Cursor Position
  lcd.println("Generator"); // Print the this Text
  lcd.display(); // Update the Display
  delay(2000); // Delay of 2 SEC
  update_display(); // Call update_display Function
  */
  lcd.backlight(); //menghidupkan lampu latar
//  lcd.setCursor(0,0); //menentukan kursor mulai kolom ke 0 baris ke 0 (atas)
//  lcd.print("ROBOTIKA"); //text yang akan ditampilkan
//  lcd.setCursor(0,1); //menentukan kursor mulai kolom ke 0 baris ke 1 (bawah)
//  lcd.print("UNY");//text yang akan ditampilkan
}

void loop()
{
  clockPin = digitalRead(CLK_PIN);
  if (clockPin != clockPinState && clockPin == 1) {
    if (digitalRead(DATA_PIN) != clockPin) {
      counter--;
    }
    else {
      counter++; // Encoder is rotating CW so increment
    }
    if (counter < 1 ) counter = 1;
    Serial.println(counter);
    update_display();
    
    int counterx = counter;
    
    Serial.print("Position: ");
    Serial.println(counterx);
  }
  clockPinState = clockPin; 
  
   //If we detect LOW signal, button is pressed
   if ( digitalRead(BTN_PIN) == LOW && millis() - waktu > debounce) {
    Serial.println("encoder pressed");
    encoder_btn_count++; // Increment the values
    if (encoder_btn_count > 2) // if value is grater that 2 reset it to 0
    {
      encoder_btn_count = 0;
    }
    if (encoder_btn_count == 0) {
      waveSelect = "SIN";
      update_display(); display
    }
    if (encoder_btn_count == 1) {
      waveSelect = "SQR";
      update_display(); display
    }
    if (encoder_btn_count == 2) {
      waveSelect = "TRI"; 
      update_display();}
    waktu = millis(); 
  }
  
  if (digitalRead(SET_FREQUENCY_HZ) == LOW && millis() - waktu > debounce) {
    Serial.println("SET_FREQUENCY_HZ - pressed"); 
    set_frequency = 0;
    update_display();
    waktu = millis();
  }
  if (digitalRead(SET_FREQUENCY_KHZ) == LOW && millis() - waktu > debounce) {
    Serial.println("SET_FREQUENCY_KHZ - pressed"); 
    set_frequency = 1;
    moduleFrequency = counter * 1000;
    update_display();
    waktu = millis();
  }
  if (digitalRead(SET_FREQUENCY_MHZ) == LOW && millis() - waktu > debounce ) {
    Serial.println("SET_FREQUENCY_MHZ - pressed"); 
    set_frequency = 2;
    moduleFrequency = counter * 1000000;
    update_display();
    waktu = millis();
  }
  if (digitalRead(ENABLE_DISABLE_OUTPUT_PIN) == LOW && millis() - waktu > debounce ) {
    Serial.println("ENABLE_DISABLE_OUTPUT_PIN - pressed");
    btn_state = ! btn_state; 
    gen.EnableOutput(btn_state); 
    update_display();

    waktu = millis();
  }
}

void update_display()
{
  lcd.clear(); // FIrst clear the display
  //lcd.setTextSize(1); //set text Size
//  lcd.setCursor(0,0); // Set cursor position
//  lcd.println("Function Generator"); //print the text
  //lcd.setTextSize(2);//set text Size
//  lcd.setCursor(0,0);//Set cursor position
//  lcd.println("Output ON");
  if (set_frequency == 0) { 
    moduleFrequency = counter;
  }
  if (set_frequency == 1) { 
    moduleFrequency = counter * 1000;
  }
  if (set_frequency == 2) { 
    moduleFrequency = counter * 1000000;
    if (moduleFrequency > 12000000)
    {
      moduleFrequency = 12000000; 
      counter = 12;
    }
  }
  if (waveSelect == "SIN") { 
    lcd.setCursor(0,0);
    lcd.println("SIN");
    gen.ApplySignal(SINE_WAVE, REG0, moduleFrequency);
    Serial.println(moduleFrequency);
  }
  if (waveSelect == "SQR") {
    lcd.setCursor(0,0);
    lcd.println("SQR");
    gen.ApplySignal(SQUARE_WAVE, REG0, moduleFrequency);
    Serial.println(moduleFrequency);
  }
  if (waveSelect == "TRI" ) {
    lcd.setCursor(0,0);
    lcd.println("TRI");
    gen.ApplySignal(TRIANGLE_WAVE, REG0, moduleFrequency); 
    Serial.println(moduleFrequency);
  }
  lcd.setCursor(5,1);
  lcd.println(counter); .
  if (set_frequency_hz == 1 && set_frequency_khz == 0 && set_frequency_mhz == 0 ) {
    lcd.setCursor(13, 1);
    lcd.println(" Hz"); 
    lcd.display(); 
  }
  if (set_frequency_hz == 0 && set_frequency_khz == 1 && set_frequency_mhz == 0 ) {
    lcd.setCursor(13, 1);
    lcd.println("Khz");
    lcd.display();
  }
  if (set_frequency_hz == 0 && set_frequency_khz == 0 && set_frequency_mhz == 1) {
    lcd.setCursor(13, 1);
    lcd.println("Mhz");
    lcd.display();
  }
  if (btn_state) { 
    lcd.setCursor(13, 0);
    lcd.print(" ON");
    lcd.display();
  }
  else {
    lcd.setCursor(13, 0);
    lcd.print("OFF");
    lcd.display();    
  }
}
